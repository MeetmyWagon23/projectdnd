buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = '1.0'
group = 'com.meetmywagon23.projectdnd' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'projectdnd'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {

    mappings channel: 'official', version: '1.19.2'

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    runs {
        client {
            workingDirectory project.file('run')


            mods {
                projectdnd {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            mods {
                projectdnd {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            args '--mod', 'projectdnd', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                projectdnd {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {

	//maven { url "https://www.cursemaven.com" }
	maven { url "https://maven.shedaniel.me/" }
    maven { url 'https://maven.kosmx.dev/'}

}

dependencies {

    minecraft 'net.minecraftforge:forge:1.19.2-43.1.3'

	//annotationProcessor 'org.spongepowered:mixin:0.8.4:processor' grabbed this from another thing, hasnt been useful as of yet.
  //  compileOnly fg.deobf("curse.maven:bettercombat-639842:3961030")
  //  modImplimentation("curse.maven:bendylib-6233733930015") an optional mod that we may use later.
	modImplementation ("dev.kosmx.player-anim:player-animation-lib-forge:${project.player_anim}")
   	implementation fg.deobf("me.shedaniel.cloth:cloth-config-forge:8.0.75")
    modImplimentation ("curse.maven:bettercombat-639842:3961030")

    

}


jar {
    manifest {
        attributes([
                "Specification-Title"     : "Project D&D",
                "Specification-Vendor"    : "Wagon & Group",
                "Specification-Version"   : "0.0.2",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "MeetmyWagon23",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}
